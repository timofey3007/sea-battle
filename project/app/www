#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('see-batle:server');
const http = require('http');
const ExpressPeerServer = require('peer').ExpressPeerServer;

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.NODE_PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Create peer connection between 2 users
 */
const peerServer = ExpressPeerServer(server, {
  debug: process.env.NODE_ENV === 'development',
  // TODO After adding ssl to project
  // ssl: {
  //     key: fs.readFileSync('./../certificates/key.pem', 'utf8'),
  //     cert: fs.readFileSync('./../certificates/cert.pem', 'utf8')
  // }
});

app.use('/peer-js', peerServer);

peerServer.on('connection', function(id) {
  console.log(`has connected - ${id}`);
});

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  let err = new Error('Not Found');

  err.status = 404;
  next(err);
});

// error handler
app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
